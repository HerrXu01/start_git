Git_instructions

mkdir *****  //新建一个文件夹
//怎么删除？？

cd *****  //打开一个文件夹

pwd  //显示当前目录

git init  //初始化，打开某个文件夹之后使用此命令可以将当前目录变成Git可以管理的仓库

版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等
无法跟踪图片、视频和word的改动
文本建议使用UTF-8编码
不要使用windows自带的记事本来编辑任何文本文件，用VS Code
用VScode新建文件：点击左上角“文件” -> “新建文件” -> 保存

git ls-files
//这将列出存储库中的所有文件，包括仅暂存但尚未提交的文件

git add filename.txt  //将当前工作区的文件添加到暂存区

git commit -m "message"  //把暂存区的所有改动提交到仓库，-m后为本次提交的说明
//可以添加多个不同的文件，再一次性提交，比如
//git add file1.txt
//git add file2.txt file3.txt
//git commit -m "add 3 files"
//请记住，提交时记录的是放在暂存区域的快照
//每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较

git commit -a -m "message"  //跳过使用暂存区域直接提交，不需要add，直接进行此操作
//这很方便，但是要小心，有时这个选项会将不需要的文件添加到提交中

//注意：如果对某文件进行了修改1，并将其add到暂存区中，之后又对工作区中的该文件进行了修改2，这时如果运行git commit，
//是将暂存区中进行了修改1的文件提交到master分支，要想提交修改2的文件，需要再一次add

git status  //显示仓库当前的状态
//状态简览：使用 git status -s 命令或 git status --short 命令，你将得到一种格式更为紧凑的输出
//新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。
//注意，这种状态简览的情况下文件前面的标记有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态
//例如：
// M file1
  M  file2
  MM file3
//file1在工作区已修改但尚未暂存
//file2文件已修改且已暂存
//file3已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分

git diff filename.txt  //比较的是工作目录中当前文件和暂存区域快照之间的差异。 也就是修改之后还没有暂存起来的变化内容
//如果把所有的改动都add暂存了，再执行git diff命令，不会有任何结果，因为工作区的文件没有新增的改动。
//若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --staged 命令。 这条命令将比对已暂存文件与最后一次提交的文件差异
//用 git diff --cached 查看已经暂存起来的变化（ --staged 和 --cached 是同义词）

git log  //显示从最近到最远的提交日志
//使用完git log后一直显示一个冒号无法退出 解决方法其实很简单，（英文状态下）输入字母q即可退出

git log --pretty=oneline  //也是最近到最远的提交日志，但比 git log 更加简洁，每条改动信息前的数字字母组合是commit id(版本号)

git reset --hard HEAD^  //将当前版本回退到上一个版本，HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上一个版本
                        //往前100个版本写成HEAD~100

cat filename.txt  //显示某文件的内容

如果回退到上一个版本之后又后悔了，又想回到之前最新的版本，可以使用以下命令：
git reset --hard *****  //*****是之前最新版本的commit id，只用写前几位就行了

如果回退到上一个版本之后关掉了电脑，然后后悔了，想回到之前最新的版本，可以用以下命令找到之前最新版本的commit id
git reflog  //该指令记录了每一次命令

工作区：就是电脑里能看到的目录。比如我们打开learngit文件夹，运行git init让git能够管理此文件夹，这时这个learngit文件夹就是工作区
版本库：运行git init之后，在工作区中有一个隐藏的目录.git，这个不是工作区，而是git的版本库repository
版本库里面最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD

场景1：当改乱了工作区的某个文件时，改动还没有add，想直接丢弃工作区的修改时，用命令git checkout -- file

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

添加远程仓库
运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写，这个简写就是该远程仓库在本地保存的一个
简称，以后传输的时候就不用输网址了，比如需要push的时候，直接运行 git push origin master, 或者 git push <shortname> master
当然直接在push后面加网址也可以，但很麻烦
shortname 该简称默认的是origin, 当然也可以自己来命名
//修改简称
如果添加了多个远程仓库，origin, sk, t1, 等等，这个时候感觉t1这个简称过于简略，想把这个简称改成test1，可运行
git remote rename t1 test1
然后git remote 看看是否修改成功
//
url可以是网址https://开头的，也可以是git@server-name:path/repo-name.git, 比如git@github.com:HerrXu01/for_test_1.git
前者是https协议，后者是ssh协议，后者传输更快一些
//修改协议
如果一开始添加仓库的时候，URL用的是https，现在想换成ssh协议的
比如添加了一个远程仓库1，简称是origin，运行以下指令
git remote rm origin
git remote add origin git@github.com:HerrXu01/for_test_1.git
git push -u origin master
//

一个本地仓库可以添加多个远程仓库
这时候要注意在添加的时候，上述的简称要区分开；
一个本地仓库与多个远程仓库关联之后，可以运行 git remote 指令来查看所有已关联的远程仓库的简称
git remote -v 可以显示出仓库的简称和对应的URL

修改远程仓库的名称
在github上打开该仓库，点击settings，就可以直接改名称了
如果所修改的这个远程仓库之前就已经与某些本地仓库关联了的话，改完远程仓库的名称之后，还要重新进行关联；
比如我的远程仓库for_test重命名成了for_test_1，原先远程仓库for_test与本地仓库git_test_1关联的，但这时候因为
远程仓库重命名导致路径不对了，所以要重新设置URL
git remote set-url origin 新的URL
注：这里for_test在本地保存的简称是origin，如果简称不是origin，则要用之前保存的简称；
改完之后，可以运行git remote -v看一下

克隆远程仓库
例：我们先在github上新建了一个仓库gitskills，有一个README文件，现在要把这个仓库克隆到本地
比如我现在想把这个gitskills仓库克隆到E盘computer_courses这个文件夹，就先让git管理这个文件夹，
然后执行克隆命令
git clone 该仓库的地址
就可以了

如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：
git clone 地址 新的目录名

有时候会遇到报错 OpenSSL SSL_read: Connection was reset, errno 10054
可以输入以下命令
git config --global http.sslVerify "false"

git bash返回上一级目录
cd ..\
两次回车


分支相关命令

查看分支 git branch 
此命令会列出所有分支，并在当前分支前面加上*

创建分支 git branch name
比如 git branch dev 
创建了一个名为dev的分支

切换分支
git checkout name 或 git switch name
将HEAD指针指向所要切换到的分支

创建+切换分支
git checkout -b name 或 git switch -c name
将以上的两步合成一步

每次提交，Git会将它们串成一条时间线，到目前，只有一条时间线，这个分支就叫主分支，即master分支
HEAD指向master, master指向最新的提交，HEAD就表示当前
每次提交，master都会向前移动，
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，
然后我们再把HEAD指向dev（即切换到dev），就表示当前分支在dev上，
在dev分支上，我们对文件进行修改，并进行新的提交，dev指针就会向前移动，而master指针保持不动，
当我们切换回master指针时，发现文件里在dev分支上做的添加或者改动都没了，文件还是master指针指向的提交时的样子，

如果我们在dev上的工作完成了，我们可以将dev上的工作合并到master上，
git merge dev
我们在dev分支上工作好了，回到了master分支上，用以上命令可将所指定的分支(dev)合并到我们当前的分支上(master)

最后可以将dev分支删除，只留下一条master分支
git branch -d name


当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。


通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "message" dev(分支名)
以上命令可以强制禁用fast forward模式，但会增加一个新的注释，所以需要加上-m "message"

可以用以下命令来查看历史
git log --graph --pretty=oneline --abbrev-commit
如果合并的时候是fast forward模式，那么在删除分支之后，用以上命令查看历史就没有这个分支的记录；
如果禁用了ff模式，就会有记录

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，
在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


-----------------------------------------------
bug分支
这里我们通过一个极其简单的示例来介绍当我们在开发过程中突然遇到一个紧急的bug的处理过程
//
我们在git_test_1文件夹里的test2.txt进行开发工作，这里我们现在该文件里写一句
Here is a bug.
这一句话我们就当做是一个bug，然后需要修正它，修正的方法就在后面再加上一句话
Here is a bug, but I have fixed it.
这样就当做bug被修复了。
这个bug是一个突然发生的状况，我们原本在该文件里（dev分支）做开发工作，我们先是敲了一句
I am developing a program.
但这时候遇到了上面说的bug，需要赶紧修改，但手头的开发工作还未做完，还需要再敲一句
I have finished all the work.
当作完成手头的工作，才可以提交。
这个时候我们需要将当前工作现场“储藏”起来，等以后恢复现场后继续工作

git stash //将当前工作储藏

首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支

git switch master //先回到master分支上

git switch -c debug-1  //在master那个位置创建了一个新的名为debug-1的分支，并转到了那个分支

然后我们在debug-1这个分支上进行修改，如上所述，我们加了一句but I have fixed it.
这样，我们就算是把这个bug修正过来了，之后添加并提交，再回到master分支，进行合并

git merge --no-ff -m "merged bug fix 1" debug-1 //注意禁用fast forward模式

git branch -d debug-1    //然后删除debug-1分支

现在master上的bug已经被修改了，我们需要回到dev继续我们之前的工作

git switch dev  //回到dev分支

这个时候可以git status看一下，工作树是干净的，因为之前的工作被储藏起来了

git stash list  //查看工作现场

现在需要将工作现场恢复，有两个方法
1. 用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
2. 用git stash pop，恢复的同时把stash内容也删了；

可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}

在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。
那怎么在dev分支上修复同样的bug？

同样的bug，要在dev上修复，我们只需要把刚刚在debug-1分支上所做的修改“复制”到dev分支。
我们在debug-1分支上修改完bug后，进行了一次提交，那次提交会有一个commit id
在一个方括号里[]，跟在debug-1的后面，我现在这里的id是  0fc990d
注意：我们只想复制0fc990d这个提交所做的修改，并不是把整个master分支merge过来。

为了方便操作，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支
在这之前，我们需要将当前的工作进行一次提交，
git commit -m "..."
之后才能将修改复制过来，
git cherry-pick 0fc990d

复制过来之后，再加上一句
I have finished all the work.  当作完成当前工作，之后添加提交。

再完成所有的开发工作之后，将dev上的工作合并到master上，删除dev分支

--------------------------------------------

在开发过程中，可能会有许多功能需要加进来，这时可以新建一个分支，
然后在这个分支上加入新的文件或者代码，然后 切换回原来的分支再合并，删除新建分支，
这个过程和bug分支很像；
但是要是在新的分支上完成了新功能的开发后，突然又不需要了，切换回原来分支，
用git branch -d newbranch 删除该新建分支，在没有合并的情况下，这个命令是删除不了的，因为分支没有合并；
可以用 git branch -D newbranch 来强制删除，当然这是在确定要舍弃新功能的情况下才强制删除；

-------------------------------------------------
因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

如果我克隆了别人的仓库，Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin；
默认情况下，我克隆了别人的仓库后只能看到本地的master分支，如果想要在dev分支上工作，就必须创建远程origin的dev分支到本地，
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；