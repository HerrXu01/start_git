Git_instructions

mkdir *****  //新建一个文件夹
//怎么删除？？

cd *****  //打开一个文件夹

pwd  //显示当前目录

git init  //初始化，打开某个文件夹之后使用此命令可以将当前目录变成Git可以管理的仓库

版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等
无法跟踪图片、视频和word的改动
文本建议使用UTF-8编码
不要使用windows自带的记事本来编辑任何文本文件，用VS Code
用VScode新建文件：点击左上角“文件” -> “新建文件” -> 保存

git ls-files
//这将列出存储库中的所有文件，包括仅暂存但尚未提交的文件

git add filename.txt  //将当前工作区的文件添加到暂存区

git commit -m "message"  //把暂存区的所有改动提交到仓库，-m后为本次提交的说明
//可以添加多个不同的文件，再一次性提交，比如
//git add file1.txt
//git add file2.txt file3.txt
//git commit -m "add 3 files"
//请记住，提交时记录的是放在暂存区域的快照
//每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较

git commit -a -m "message"  //跳过使用暂存区域直接提交，不需要add，直接进行此操作
//这很方便，但是要小心，有时这个选项会将不需要的文件添加到提交中

//注意：如果对某文件进行了修改1，并将其add到暂存区中，之后又对工作区中的该文件进行了修改2，这时如果运行git commit，
//是将暂存区中进行了修改1的文件提交到master分支，要想提交修改2的文件，需要再一次add

git status  //显示仓库当前的状态
//状态简览：使用 git status -s 命令或 git status --short 命令，你将得到一种格式更为紧凑的输出
//新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。
//注意，这种状态简览的情况下文件前面的标记有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态
//例如：
// M file1
  M  file2
  MM file3
//file1在工作区已修改但尚未暂存
//file2文件已修改且已暂存
//file3已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分

git diff filename.txt  //比较的是工作目录中当前文件和暂存区域快照之间的差异。 也就是修改之后还没有暂存起来的变化内容
//如果把所有的改动都add暂存了，再执行git diff命令，不会有任何结果，因为工作区的文件没有新增的改动。
//若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --staged 命令。 这条命令将比对已暂存文件与最后一次提交的文件差异
//用 git diff --cached 查看已经暂存起来的变化（ --staged 和 --cached 是同义词）

git log  //显示从最近到最远的提交日志
//使用完git log后一直显示一个冒号无法退出 解决方法其实很简单，（英文状态下）输入字母q即可退出

git log --pretty=oneline  //也是最近到最远的提交日志，但比 git log 更加简洁，每条改动信息前的数字字母组合是commit id(版本号)

git reset --hard HEAD^  //将当前版本回退到上一个版本，HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上一个版本
                        //往前100个版本写成HEAD~100

cat filename.txt  //显示某文件的内容

如果回退到上一个版本之后又后悔了，又想回到之前最新的版本，可以使用以下命令：
git reset --hard *****  //*****是之前最新版本的commit id，只用写前几位就行了

如果回退到上一个版本之后关掉了电脑，然后后悔了，想回到之前最新的版本，可以用以下命令找到之前最新版本的commit id
git reflog  //该指令记录了每一次命令

工作区：就是电脑里能看到的目录。比如我们打开learngit文件夹，运行git init让git能够管理此文件夹，这时这个learngit文件夹就是工作区
版本库：运行git init之后，在工作区中有一个隐藏的目录.git，这个不是工作区，而是git的版本库repository
版本库里面最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD

场景1：当改乱了工作区的某个文件时，改动还没有add，想直接丢弃工作区的修改时，用命令git checkout -- file

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；